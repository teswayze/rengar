# include <array>
# include "board.hpp"

// This is all copied and adapted from python-chess's syzygy.py (as of version 1.10.0)

const std::array<uint8_t, 64> TRIANGLE = {
    6, 0, 1, 2, 2, 1, 0, 6,
    0, 7, 3, 4, 4, 3, 7, 0,
    1, 3, 8, 5, 5, 8, 3, 1,
    2, 4, 5, 9, 9, 5, 4, 2,
    2, 4, 5, 9, 9, 5, 4, 2,
    1, 3, 8, 5, 5, 8, 3, 1,
    0, 7, 3, 4, 4, 3, 7, 0,
    6, 0, 1, 2, 2, 1, 0, 6,
};
const std::array<Square, 10> INVTRIANGLE = {1, 2, 3, 10, 11, 19, 0, 9, 18, 27};

constexpr bool offdiag(const Square square){ return (square << 3) != (square & 7); }
constexpr bool abovediag(const Square square){ return (square << 3) > (square & 7); }
constexpr Square flipdiag(const Square square){ return ((square >> 3) | (square << 3)) & 63; }

const std::array<uint8_t, 64> LOWER = {
    28,  0,  1,  2,  3,  4,  5,  6,
     0, 29,  7,  8,  9, 10, 11, 12,
     1,  7, 30, 13, 14, 15, 16, 17,
     2,  8, 13, 31, 18, 19, 20, 21,
     3,  9, 14, 18, 32, 22, 23, 24,
     4, 10, 15, 19, 22, 33, 25, 26,
     5, 11, 16, 20, 23, 25, 34, 27,
     6, 12, 17, 21, 24, 26, 27, 35,
};
const std::array<uint8_t, 64> DIAG = {
     0,  0,  0,  0,  0,  0,  0,  8,
     0,  1,  0,  0,  0,  0,  9,  0,
     0,  0,  2,  0,  0, 10,  0,  0,
     0,  0,  0,  3, 11,  0,  0,  0,
     0,  0,  0, 12,  4,  0,  0,  0,
     0,  0, 13,  0,  0,  5,  0,  0,
     0, 14,  0,  0,  0,  0,  6,  0,
    15,  0,  0,  0,  0,  0,  0,  7,
};
const std::array<uint8_t, 64> FLAP = {
    0,  0,  0,  0,  0,  0,  0, 0,
    0,  6, 12, 18, 18, 12,  6, 0,
    1,  7, 13, 19, 19, 13,  7, 1,
    2,  8, 14, 20, 20, 14,  8, 2,
    3,  9, 15, 21, 21, 15,  9, 3,
    4, 10, 16, 22, 22, 16, 10, 4,
    5, 11, 17, 23, 23, 17, 11, 5,
    0,  0,  0,  0,  0,  0,  0, 0,
};
const std::array<uint8_t, 64> PTWIST = {
     0,  0,  0,  0,  0,  0,  0,  0,
    47, 35, 23, 11, 10, 22, 34, 46,
    45, 33, 21,  9,  8, 20, 32, 44,
    43, 31, 19,  7,  6, 18, 30, 42,
    41, 29, 17,  5,  4, 16, 28, 40,
    39, 27, 15,  3,  2, 14, 26, 38,
    37, 25, 13,  1,  0, 12, 24, 36,
     0,  0,  0,  0,  0,  0,  0,  0,
};

const std::array<Square, 24> INVFLAP = {
     8, 16, 24, 32, 40, 48,
     9, 17, 25, 33, 41, 49,
    10, 18, 26, 34, 42, 50,
    11, 19, 27, 35, 43, 51,
};
const std::array<uint8_t, 8> FILE_TO_FILE = {0, 1, 2, 3, 3, 2, 1, 0};

const std::array<std::array<int16_t, 64>, 10> KK_IDX = {
    std::array<int16_t, 64>{
        -1,  -1,  -1,   0,   1,   2,   3,   4,
        -1,  -1,  -1,   5,   6,   7,   8,   9,
        10,  11,  12,  13,  14,  15,  16,  17,
        18,  19,  20,  21,  22,  23,  24,  25,
        26,  27,  28,  29,  30,  31,  32,  33,
        34,  35,  36,  37,  38,  39,  40,  41,
        42,  43,  44,  45,  46,  47,  48,  49,
        50,  51,  52,  53,  54,  55,  56,  57,
    },
    std::array<int16_t, 64>{
        58,  -1,  -1,  -1,  59,  60,  61,  62,
        63,  -1,  -1,  -1,  64,  65,  66,  67,
        68,  69,  70,  71,  72,  73,  74,  75,
        76,  77,  78,  79,  80,  81,  82,  83,
        84,  85,  86,  87,  88,  89,  90,  91,
        92,  93,  94,  95,  96,  97,  98,  99,
        100, 101, 102, 103, 104, 105, 106, 107,
        108, 109, 110, 111, 112, 113, 114, 115,
    },
    std::array<int16_t, 64>{
        116, 117,  -1,  -1,  -1, 118, 119, 120,
        121, 122,  -1,  -1,  -1, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133,
        134, 135, 136, 137, 138, 139, 140, 141,
        142, 143, 144, 145, 146, 147, 148, 149,
        150, 151, 152, 153, 154, 155, 156, 157,
        158, 159, 160, 161, 162, 163, 164, 165,
        166, 167, 168, 169, 170, 171, 172, 173,
    },
    std::array<int16_t, 64>{
        174,  -1,  -1,  -1, 175, 176, 177, 178,
        179,  -1,  -1,  -1, 180, 181, 182, 183,
        184,  -1,  -1,  -1, 185, 186, 187, 188,
        189, 190, 191, 192, 193, 194, 195, 196,
        197, 198, 199, 200, 201, 202, 203, 204,
        205, 206, 207, 208, 209, 210, 211, 212,
        213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228,
    },
    std::array<int16_t, 64>{
        229, 230,  -1,  -1,  -1, 231, 232, 233,
        234, 235,  -1,  -1,  -1, 236, 237, 238,
        239, 240,  -1,  -1,  -1, 241, 242, 243,
        244, 245, 246, 247, 248, 249, 250, 251,
        252, 253, 254, 255, 256, 257, 258, 259,
        260, 261, 262, 263, 264, 265, 266, 267,
        268, 269, 270, 271, 272, 273, 274, 275,
        276, 277, 278, 279, 280, 281, 282, 283,
    },
    std::array<int16_t, 64>{
        284, 285, 286, 287, 288, 289, 290, 291,
        292, 293,  -1,  -1,  -1, 294, 295, 296,
        297, 298,  -1,  -1,  -1, 299, 300, 301,
        302, 303,  -1,  -1,  -1, 304, 305, 306,
        307, 308, 309, 310, 311, 312, 313, 314,
        315, 316, 317, 318, 319, 320, 321, 322,
        323, 324, 325, 326, 327, 328, 329, 330,
        331, 332, 333, 334, 335, 336, 337, 338,
    },
    std::array<int16_t, 64>{
        -1,  -1, 339, 340, 341, 342, 343, 344,
        -1,  -1, 345, 346, 347, 348, 349, 350,
        -1,  -1, 441, 351, 352, 353, 354, 355,
        -1,  -1,  -1, 442, 356, 357, 358, 359,
        -1,  -1,  -1,  -1, 443, 360, 361, 362,
        -1,  -1,  -1,  -1,  -1, 444, 363, 364,
        -1,  -1,  -1,  -1,  -1,  -1, 445, 365,
        -1,  -1,  -1,  -1,  -1,  -1,  -1, 446,
    },
    std::array<int16_t, 64>{
        -1,  -1,  -1, 366, 367, 368, 369, 370,
        -1,  -1,  -1, 371, 372, 373, 374, 375,
        -1,  -1,  -1, 376, 377, 378, 379, 380,
        -1,  -1,  -1, 447, 381, 382, 383, 384,
        -1,  -1,  -1,  -1, 448, 385, 386, 387,
        -1,  -1,  -1,  -1,  -1, 449, 388, 389,
        -1,  -1,  -1,  -1,  -1,  -1, 450, 390,
        -1,  -1,  -1,  -1,  -1,  -1,  -1, 451,
    },
    std::array<int16_t, 64>{
        452, 391, 392, 393, 394, 395, 396, 397,
        -1,  -1,  -1,  -1, 398, 399, 400, 401,
        -1,  -1,  -1,  -1, 402, 403, 404, 405,
        -1,  -1,  -1,  -1, 406, 407, 408, 409,
        -1,  -1,  -1,  -1, 453, 410, 411, 412,
        -1,  -1,  -1,  -1,  -1, 454, 413, 414,
        -1,  -1,  -1,  -1,  -1,  -1, 455, 415,
        -1,  -1,  -1,  -1,  -1,  -1,  -1, 456,
    },
    std::array<int16_t, 64>{
        457, 416, 417, 418, 419, 420, 421, 422,
        -1, 458, 423, 424, 425, 426, 427, 428,
        -1,  -1,  -1,  -1,  -1, 429, 430, 431,
        -1,  -1,  -1,  -1,  -1, 432, 433, 434,
        -1,  -1,  -1,  -1,  -1, 435, 436, 437,
        -1,  -1,  -1,  -1,  -1, 459, 438, 439,
        -1,  -1,  -1,  -1,  -1,  -1, 460, 440,
        -1,  -1,  -1,  -1,  -1,  -1,  -1, 461,
    }
};
const std::array<std::array<int16_t, 64>, 10> PP_IDX = {
    std::array<int16_t, 64>{
        0,  -1,   1,   2,   3,   4,   5,   6,
        7,   8,   9,  10,  11,  12,  13,  14,
        15,  16,  17,  18,  19,  20,  21,  22,
        23,  24,  25,  26,  27,  28,  29,  30,
        31,  32,  33,  34,  35,  36,  37,  38,
        39,  40,  41,  42,  43,  44,  45,  46,
        -1,  47,  48,  49,  50,  51,  52,  53,
        54,  55,  56,  57,  58,  59,  60,  61,
    },
    std::array<int16_t, 64>{
        62,  -1,  -1,  63,  64,  65,  -1,  66,
        -1,  67,  68,  69,  70,  71,  72,  -1,
        73,  74,  75,  76,  77,  78,  79,  80,
        81,  82,  83,  84,  85,  86,  87,  88,
        89,  90,  91,  92,  93,  94,  95,  96,
        -1,  97,  98,  99, 100, 101, 102, 103,
        -1, 104, 105, 106, 107, 108, 109,  -1,
        110,  -1, 111, 112, 113, 114,  -1, 115,
    },
    std::array<int16_t, 64>{
        116,  -1,  -1,  -1, 117,  -1,  -1, 118,
        -1, 119, 120, 121, 122, 123, 124,  -1,
        -1, 125, 126, 127, 128, 129, 130,  -1,
        131, 132, 133, 134, 135, 136, 137, 138,
        -1, 139, 140, 141, 142, 143, 144, 145,
        -1, 146, 147, 148, 149, 150, 151,  -1,
        -1, 152, 153, 154, 155, 156, 157,  -1,
        158,  -1,  -1, 159, 160,  -1,  -1, 161,
    },
    std::array<int16_t, 64>{
        162,  -1,  -1,  -1,  -1,  -1,  -1, 163,
        -1, 164,  -1, 165, 166, 167, 168,  -1,
        -1, 169, 170, 171, 172, 173, 174,  -1,
        -1, 175, 176, 177, 178, 179, 180,  -1,
        -1, 181, 182, 183, 184, 185, 186,  -1,
        -1,  -1, 187, 188, 189, 190, 191,  -1,
        -1, 192, 193, 194, 195, 196, 197,  -1,
        198,  -1,  -1,  -1,  -1,  -1,  -1, 199,
    },
        std::array<int16_t, 64>{
        200,  -1,  -1,  -1,  -1,  -1,  -1, 201,
        -1, 202,  -1,  -1, 203,  -1, 204,  -1,
        -1,  -1, 205, 206, 207, 208,  -1,  -1,
        -1, 209, 210, 211, 212, 213, 214,  -1,
        -1,  -1, 215, 216, 217, 218, 219,  -1,
        -1,  -1, 220, 221, 222, 223,  -1,  -1,
        -1, 224,  -1, 225, 226,  -1, 227,  -1,
        228,  -1,  -1,  -1,  -1,  -1,  -1, 229,
    },
    std::array<int16_t, 64>{
        230,  -1,  -1,  -1,  -1,  -1,  -1, 231,
        -1, 232,  -1,  -1,  -1,  -1, 233,  -1,
        -1,  -1, 234,  -1, 235, 236,  -1,  -1,
        -1,  -1, 237, 238, 239, 240,  -1,  -1,
        -1,  -1,  -1, 241, 242, 243,  -1,  -1,
        -1,  -1, 244, 245, 246, 247,  -1,  -1,
        -1, 248,  -1,  -1,  -1,  -1, 249,  -1,
        250,  -1,  -1,  -1,  -1,  -1,  -1, 251,
    },
    std::array<int16_t, 64>{
        -1,  -1,  -1,  -1,  -1,  -1,  -1, 259,
        -1, 252,  -1,  -1,  -1,  -1, 260,  -1,
        -1,  -1, 253,  -1,  -1, 261,  -1,  -1,
        -1,  -1,  -1, 254, 262,  -1,  -1,  -1,
        -1,  -1,  -1,  -1, 255,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1, 256,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1, 257,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1, 258,
    },
    std::array<int16_t, 64>{
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1, 268,  -1,
        -1,  -1, 263,  -1,  -1, 269,  -1,  -1,
        -1,  -1,  -1, 264, 270,  -1,  -1,  -1,
        -1,  -1,  -1,  -1, 265,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1, 266,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1, 267,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
    },
    std::array<int16_t, 64>{
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1, 274,  -1,  -1,
        -1,  -1,  -1, 271, 275,  -1,  -1,  -1,
        -1,  -1,  -1,  -1, 272,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1, 273,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
    },
    std::array<int16_t, 64>{
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1, 277,  -1,  -1,  -1,
        -1,  -1,  -1,  -1, 276,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
        -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,
    }
};

constexpr bool test45(const Square square){ 
    return ToMask(square) & (ToMask(A5) | ToMask(A6) | ToMask(A7) | ToMask(B5) | ToMask(B6) | ToMask(C5));
}

const std::array<Square, 64> MTWIST = {
    15, 63, 55, 47, 40, 48, 56, 12,
    62, 11, 39, 31, 24, 32,  8, 57,
    54, 38,  7, 23, 16,  4, 33, 49,
    46, 30, 22,  3,  0, 17, 25, 41,
    45, 29, 21,  2,  1, 18, 26, 42,
    53, 37,  6, 20, 19,  5, 34, 50,
    61, 10, 36, 28, 27, 35,  9, 58,
    14, 60, 52, 44, 43, 51, 59, 13,
};

// TODO: binom

const std::array<std::array<uint32_t, 24>, 5> PAWNIDX = {
    std::array<uint32_t, 24>{
             0,      1,      2,      3,      4,      5, 
             0,      1,      2,      3,      4,      5, 
             0,      1,      2,      3,      4,      5, 
             0,      1,      2,      3,      4,      5
    }, 
    std::array<uint32_t, 24>{
             0,     47,     92,    135,    176,    215, 
             0,     35,     68,     99,    128,    155, 
             0,     23,     44,     63,     80,     95, 
             0,     11,     20,     27,     32,     35
    }, 
    std::array<uint32_t, 24>{
             0,   1081,   2071,   2974,   3794,   4535, 
             0,    595,   1123,   1588,   1994,   2345, 
             0,    253,    463,    634,    770,    875, 
             0,     55,     91,    112,    122,    125
    }, 
    std::array<uint32_t, 24>{
             0,  16215,  30405,  42746,  53406,  62545,
             0,   6545,  12001,  16496,  20150,  23075, 
             0,   1771,   3101,   4070,   4750,   5205, 
             0,    165,    249,    284,    294,    295
    },
    std::array<uint32_t, 24>{
             0, 178365, 327360, 450770, 552040, 634291, 
             0,  52360,  93280, 124745, 148496, 166046, 
             0,   8855,  14840,  18716,  21096,  22461, 
             0,    330,    456,    491,    496,    496
    }
};
const std::array<std::array<uint32_t, 4>, 5> PFACTOR = {
    std::array<uint32_t, 4>{     6,      6,      6,      6},
    std::array<uint32_t, 4>{   252,    180,    108,     36},
    std::array<uint32_t, 4>{  5201,   2645,    953,    125},
    std::array<uint32_t, 4>{ 70315,  25375,   5491,    295},
    std::array<uint32_t, 4>{700336, 178696,  23176,    496}
};

const std::array<std::array<uint32_t, 10>, 5> MULTIDX = {
       std::array<uint32_t, 10>{      0,       1,       2,       3,       4,       5,       6,       7,       8,       9},
       std::array<uint32_t, 10>{      0,      63,     118,     165,     204,     235,     258,     273,     284,     291},
       std::array<uint32_t, 10>{      0,    1953,    3438,    4519,    5260,    5725,    5978,    6083,    6138,    6159},
       std::array<uint32_t, 10>{      0,   39711,   65946,   82161,   91300,   95795,   97566,   98021,   98186,   98221},
       std::array<uint32_t, 10>{      0,  595665,  936720, 1115085, 1197336, 1228801, 1237656, 1239021, 1239351, 1239386}
};
const std::array<uint32_t, 10> MFACTOR = {     10,     294,    6162,   98222, 1239386};

const std::array<uint8_t, 5> WDL_TO_MAP = {1, 3, 0, 2, 0};
const std::array<uint8_t, 5> PA_FLAGS = {8, 0, 0, 0, 4};
const std::array<int8_t, 5> WDL_TO_DTZ = {-1, -101, 0, 101, 1};
const std::array<char, 6> PCHR = {'K', 'Q', 'R', 'B', 'N', 'P'};
